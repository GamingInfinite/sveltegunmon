import './Pokemon.svelte.css.proxy.js';
/* src/Components/Pokemon.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	src_url_equal,
	text
} from "../../snowpack/pkg/svelte/internal.js";

function create_fragment(ctx) {
	let script;
	let script_src_value;
	let t0;
	let div4;
	let div0;
	let img0;
	let img0_src_value;
	let t1;
	let div3;
	let div1;
	let t2;
	let t3;
	let img1;
	let img1_src_value;
	let t4;
	let div2;

	return {
		c() {
			script = element("script");
			t0 = space();
			div4 = element("div");
			div0 = element("div");
			img0 = element("img");
			t1 = space();
			div3 = element("div");
			div1 = element("div");
			t2 = text(/*nick*/ ctx[0]);
			t3 = space();
			img1 = element("img");
			t4 = space();
			div2 = element("div");
			div2.textContent = "HP ATK DEF SPATK SPDEF SPEED";
			if (!src_url_equal(script.src, script_src_value = "https://twemoji.maxcdn.com/v/latest/twemoji.min.js")) attr(script, "src", script_src_value);
			attr(script, "crossorigin", "anonymous");
			if (!src_url_equal(img0.src, img0_src_value = /*avatar_link*/ ctx[1])) attr(img0, "src", img0_src_value);
			attr(img0, "alt", "pokemonimg");
			attr(img0, "class", "avatar svelte-hsyajj");
			attr(div0, "class", "avatarwrapper svelte-hsyajj");
			attr(img1, "alt", "");
			if (!src_url_equal(img1.src, img1_src_value = /*gender_link*/ ctx[2])) attr(img1, "src", img1_src_value);
			attr(img1, "class", "gender svelte-hsyajj");
			attr(div1, "class", "name svelte-hsyajj");
			attr(div2, "class", "stats svelte-hsyajj");
			attr(div3, "class", "data svelte-hsyajj");
			attr(div4, "class", "partyslot svelte-hsyajj");
		},
		m(target, anchor) {
			append(document.head, script);
			insert(target, t0, anchor);
			insert(target, div4, anchor);
			append(div4, div0);
			append(div0, img0);
			append(div4, t1);
			append(div4, div3);
			append(div3, div1);
			append(div1, t2);
			append(div1, t3);
			append(div1, img1);
			append(div3, t4);
			append(div3, div2);
		},
		p(ctx, [dirty]) {
			if (dirty & /*avatar_link*/ 2 && !src_url_equal(img0.src, img0_src_value = /*avatar_link*/ ctx[1])) {
				attr(img0, "src", img0_src_value);
			}

			if (dirty & /*nick*/ 1) set_data(t2, /*nick*/ ctx[0]);

			if (dirty & /*gender_link*/ 4 && !src_url_equal(img1.src, img1_src_value = /*gender_link*/ ctx[2])) {
				attr(img1, "src", img1_src_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			detach(script);
			if (detaching) detach(t0);
			if (detaching) detach(div4);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { number = -1, nick = "", gender = 0, item = "" } = $$props;
	let mondata;
	let speciesdata;
	let avatar_link;
	let gender_link;

	const getMon = async () => {
		const species = await fetch("https://pokeapi.co/api/v2/pokemon-species/" + number);
		const jsonspecies = await species.json();
		speciesdata = jsonspecies;
		let varieties = jsonspecies.varieties;
		let defaultvariety;

		for (let i = 0; i < varieties.length; i++) {
			const element = varieties[i];

			if (element.is_default) {
				defaultvariety = element;
			}

			//Determine Pokemon Icon Based on Gender (if any difference)
			if (element.pokemon.name == jsonspecies.name + "-male" || element.pokemon.name == jsonspecies.name + "-female") {
				switch (gender) {
					case 0:
						const mon = await fetch(defaultvariety.pokemon.url);
						const jsonmon = await mon.json();
						mondata = jsonmon;
						break;
					case 1:
						if (element.pokemon.name == jsonspecies.name + "-female") {
							const mon = await fetch(element.pokemon.url);
							const jsonmon = await mon.json();
							mondata = jsonmon;
						}
						break;
					case 2:
						if (element.pokemon.name == jsonspecies.name + "-male") {
							const mon = await fetch(element.pokemon.url);
							const jsonmon = await mon.json();
							mondata = jsonmon;
						}
						break;
					default:
						break;
				}

				if (typeof mondata !== "undefined") {
					break;
				}
			} else {
				const mon = await fetch(defaultvariety.pokemon.url);
				const jsonmon = await mon.json();
				mondata = jsonmon;
			}
		} //Determine Pokemon Icon Based on Item (Specifically like Giratina Origin Form, and Zacian or Zamazenta-Crowned.  This doesn't count for primal reversion because that occurs during battle)
	};

	if (number > 0) {
		getMon().then(() => {
			//Pokemon Icon
			$$invalidate(1, avatar_link = mondata.sprites.front_default);

			//Pokemon Name
			if (nick == "") {
				$$invalidate(0, nick = speciesdata.name.charAt(0).toUpperCase() + speciesdata.name.slice(1));
			}

			//Pokemon Gender
			switch (gender) {
				case 0:
					break;
				case 1:
					$$invalidate(2, gender_link = "https://twemoji.maxcdn.com/v/14.0.2/72x72/2640.png");
					break;
				case 2:
					$$invalidate(2, gender_link = "https://twemoji.maxcdn.com/v/14.0.2/72x72/2642.png");
					break;
				default:
					break;
			}
		});
	} else {
		nick = "<Empty Slot>";
	}

	if (avatar_link == null) {
		avatar_link = "http://cdn.onlinewebfonts.com/svg/img_174253.png";
	}

	$$self.$$set = $$props => {
		if ('number' in $$props) $$invalidate(3, number = $$props.number);
		if ('nick' in $$props) $$invalidate(0, nick = $$props.nick);
		if ('gender' in $$props) $$invalidate(4, gender = $$props.gender);
		if ('item' in $$props) $$invalidate(5, item = $$props.item);
	};

	return [nick, avatar_link, gender_link, number, gender, item];
}

class Pokemon extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { number: 3, nick: 0, gender: 4, item: 5 });
	}
}

export default Pokemon;