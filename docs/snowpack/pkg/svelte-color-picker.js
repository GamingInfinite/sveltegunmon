import { S as SvelteComponent, i as init, s as safe_not_equal, a as append_styles, e as element, b as space, t as text, c as attr, d as insert, f as append, l as listen, g as set_data, n as noop, h as detach, r as run_all, o as onMount, j as createEventDispatcher } from './common/index-6e04f748.js';

/* node_modules/svelte-color-picker/src/HsvPicker.svelte generated by Svelte v3.48.0 */

function add_css(target) {
	append_styles(target, "svelte-8esefu", ".main-container.svelte-8esefu{width:240px;height:265px;background:#f2f2f2;border-radius:1px;-webkit-box-shadow:0px 0px 4px 0px rgba(0, 0, 0, 0.51);-moz-box-shadow:0px 0px 4px 0px rgba(0, 0, 0, 0.51);box-shadow:0px 0px 4px 0px rgba(0, 0, 0, 0.51);-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.saturation-gradient.svelte-8esefu{background:linear-gradient(to right, rgb(255, 255, 255), rgba(255, 255, 255, 0));width:240px;height:160px}.value-gradient.svelte-8esefu{background:linear-gradient(to top, rgb(0, 0, 0), rgba(0, 0, 0, 0));overflow:hidden;width:240px;height:160px}.hue-selector.svelte-8esefu{background:linear-gradient(to right, #ff0000 0%, #ffff00 17%, #00ff00 33%, #00ffff 50%, #0000ff 67%, #ff00ff 83%, #ff0000 100%);margin:15px 10px 10px 10px;border-radius:10px;height:10px}#hue-picker.svelte-8esefu{background:#FFF;width:12px;height:12px;border-radius:50%;left:0%;position:relative;cursor:default;transform:translate(-5px, -1px);-webkit-box-shadow:0px 0px 5px 0px rgba(0, 0, 0, 0.67);-moz-box-shadow:0px 0px 5px 0px rgba(0, 0, 0, 0.67);box-shadow:0px 0px 5px 0px rgba(0, 0, 0, 0.67)}#hue-event.svelte-8esefu{width:236px;height:14px;transform:translate(-8px, -14px);cursor:default;touch-action:none}.alpha-selector.svelte-8esefu{background-image:linear-gradient(45deg, #808080 25%, transparent 25%), linear-gradient(-45deg, #808080 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #808080 75%), linear-gradient(-45deg, transparent 75%, #808080 75%);background-size:10px 10px;background-position:0 0, 0 5px, 5px -5px, -5px 0px;margin:10px 10px;border-radius:10px;height:10px;position:relative}#alpha-picker.svelte-8esefu{background:#FFF;width:12px;height:12px;border-radius:50%;left:100%;position:relative;cursor:default;transform:translate(-5px, -11px);-webkit-box-shadow:0px 0px 5px 0px rgba(0, 0, 0, 0.67);-moz-box-shadow:0px 0px 5px 0px rgba(0, 0, 0, 0.67);box-shadow:0px 0px 5px 0px rgba(0, 0, 0, 0.67)}#alpha-event.svelte-8esefu{width:236px;height:14px;transform:translate(-8px, -24px);cursor:default;touch-action:none}.alpha-value.svelte-8esefu{background:linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 1));width:100%;height:100%;border-radius:10px}.colorsquare.svelte-8esefu{background:rgb(255, 0, 0)}#colorsquare-picker.svelte-8esefu{margin:0;padding:0;width:12px;height:12px;border-radius:50%;border:2px solid #FFFB;position:relative;transform:translate(-9px, -9px);left:100%}#colorsquare-event.svelte-8esefu{width:100%;height:100%;position:relative;transform:translate(0, -16px);touch-action:none}.color-info-box.svelte-8esefu{margin:10px;width:100%;height:22px;vertical-align:middle;position:relative}.color-picked.svelte-8esefu{width:18px;height:18px;border-radius:2px;background:rgba(255, 0, 0, 1);display:inline-block}.color-picked-bg.svelte-8esefu{background-image:linear-gradient(45deg, #808080 25%, transparent 25%), linear-gradient(-45deg, #808080 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #808080 75%), linear-gradient(-45deg, transparent 75%, #808080 75%);background-size:10px 10px;background-position:0 0, 0 5px, 5px -5px, -5px 0px;border:2px solid #FFF;border-radius:4px;width:18px;height:18px;color:#fff;display:inline-block}.hex-text-block.svelte-8esefu{display:inline-block;background:white;border-radius:2px;padding:2px;border:1px solid #e3e3e3;height:16px;width:54px;vertical-align:top;text-align:center}.rgb-text-block.svelte-8esefu{display:inline-block;background:white;border-radius:2px;padding:2px;margin:0 1px;border:1px solid #dcdcdc;height:16px;width:23px;vertical-align:top;text-align:center}.rgb-text-div.svelte-8esefu{right:10%;display:inline-block;vertical-align:top;position:absolute}.text-label.svelte-8esefu{position:relative;top:-12px;font-family:sans-serif;font-size:small;color:#888}.text.svelte-8esefu{display:inline;font-family:sans-serif;margin:0;display:inline-block;font-size:12px;font-size-adjust:0.50;position:relative;top:-1px;vertical-align:middle;-webkit-touch-callout:all;-webkit-user-select:all;-khtml-user-select:all;-moz-user-select:all;-ms-user-select:all;user-select:all}");
}

function create_fragment(ctx) {
	let div20;
	let div4;
	let div3;
	let div2;
	let div0;
	let t0;
	let div1;
	let t1;
	let div7;
	let div5;
	let t2;
	let div6;
	let t3;
	let div11;
	let div8;
	let t4;
	let div9;
	let t5;
	let div10;
	let t6;
	let div19;
	let div13;
	let t7;
	let div14;
	let p0;
	let t8;
	let t9;
	let div18;
	let div15;
	let p1;
	let t10;
	let t11;
	let p2;
	let t13;
	let div16;
	let p3;
	let t14;
	let t15;
	let p4;
	let t17;
	let div17;
	let p5;
	let t18;
	let t19;
	let p6;
	let mounted;
	let dispose;

	return {
		c() {
			div20 = element("div");
			div4 = element("div");
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			t1 = space();
			div7 = element("div");
			div5 = element("div");
			t2 = space();
			div6 = element("div");
			t3 = space();
			div11 = element("div");
			div8 = element("div");
			t4 = space();
			div9 = element("div");
			t5 = space();
			div10 = element("div");
			t6 = space();
			div19 = element("div");
			div13 = element("div");
			div13.innerHTML = `<div class="color-picked svelte-8esefu"></div>`;
			t7 = space();
			div14 = element("div");
			p0 = element("p");
			t8 = text(/*hexValue*/ ctx[3]);
			t9 = space();
			div18 = element("div");
			div15 = element("div");
			p1 = element("p");
			t10 = text(/*r*/ ctx[0]);
			t11 = space();
			p2 = element("p");
			p2.textContent = "R";
			t13 = space();
			div16 = element("div");
			p3 = element("p");
			t14 = text(/*g*/ ctx[1]);
			t15 = space();
			p4 = element("p");
			p4.textContent = "G";
			t17 = space();
			div17 = element("div");
			p5 = element("p");
			t18 = text(/*b*/ ctx[2]);
			t19 = space();
			p6 = element("p");
			p6.textContent = "B";
			attr(div0, "id", "colorsquare-picker");
			attr(div0, "class", "svelte-8esefu");
			attr(div1, "id", "colorsquare-event");
			attr(div1, "class", "svelte-8esefu");
			attr(div2, "class", "value-gradient svelte-8esefu");
			attr(div3, "class", "saturation-gradient svelte-8esefu");
			attr(div4, "class", "colorsquare size svelte-8esefu");
			attr(div5, "id", "hue-picker");
			attr(div5, "class", "svelte-8esefu");
			attr(div6, "id", "hue-event");
			attr(div6, "class", "svelte-8esefu");
			attr(div7, "class", "hue-selector svelte-8esefu");
			attr(div8, "class", "alpha-value svelte-8esefu");
			attr(div9, "id", "alpha-picker");
			attr(div9, "class", "svelte-8esefu");
			attr(div10, "id", "alpha-event");
			attr(div10, "class", "svelte-8esefu");
			attr(div11, "class", "alpha-selector svelte-8esefu");
			attr(div13, "class", "color-picked-bg svelte-8esefu");
			attr(p0, "class", "text svelte-8esefu");
			attr(div14, "class", "hex-text-block svelte-8esefu");
			attr(p1, "class", "text svelte-8esefu");
			attr(p2, "class", "text-label svelte-8esefu");
			attr(div15, "class", "rgb-text-block svelte-8esefu");
			attr(p3, "class", "text svelte-8esefu");
			attr(p4, "class", "text-label svelte-8esefu");
			attr(div16, "class", "rgb-text-block svelte-8esefu");
			attr(p5, "class", "text svelte-8esefu");
			attr(p6, "class", "text-label svelte-8esefu");
			attr(div17, "class", "rgb-text-block svelte-8esefu");
			attr(div18, "class", "rgb-text-div svelte-8esefu");
			attr(div19, "class", "color-info-box svelte-8esefu");
			attr(div20, "class", "main-container svelte-8esefu");
		},
		m(target, anchor) {
			insert(target, div20, anchor);
			append(div20, div4);
			append(div4, div3);
			append(div3, div2);
			append(div2, div0);
			append(div2, t0);
			append(div2, div1);
			append(div20, t1);
			append(div20, div7);
			append(div7, div5);
			append(div7, t2);
			append(div7, div6);
			append(div20, t3);
			append(div20, div11);
			append(div11, div8);
			append(div11, t4);
			append(div11, div9);
			append(div11, t5);
			append(div11, div10);
			append(div20, t6);
			append(div20, div19);
			append(div19, div13);
			append(div19, t7);
			append(div19, div14);
			append(div14, p0);
			append(p0, t8);
			append(div19, t9);
			append(div19, div18);
			append(div18, div15);
			append(div15, p1);
			append(p1, t10);
			append(div15, t11);
			append(div15, p2);
			append(div18, t13);
			append(div18, div16);
			append(div16, p3);
			append(p3, t14);
			append(div16, t15);
			append(div16, p4);
			append(div18, t17);
			append(div18, div17);
			append(div17, p5);
			append(p5, t18);
			append(div17, t19);
			append(div17, p6);

			if (!mounted) {
				dispose = [
					listen(div1, "mousedown", /*csDown*/ ctx[4]),
					listen(div1, "touchstart", /*csDownTouch*/ ctx[5]),
					listen(div6, "mousedown", /*hueDown*/ ctx[6]),
					listen(div6, "touchstart", /*hueDownTouch*/ ctx[7]),
					listen(div10, "mousedown", /*alphaDown*/ ctx[8]),
					listen(div10, "touchstart", /*alphaDownTouch*/ ctx[9])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*hexValue*/ 8) set_data(t8, /*hexValue*/ ctx[3]);
			if (dirty & /*r*/ 1) set_data(t10, /*r*/ ctx[0]);
			if (dirty & /*g*/ 2) set_data(t14, /*g*/ ctx[1]);
			if (dirty & /*b*/ 4) set_data(t18, /*b*/ ctx[2]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div20);
			mounted = false;
			run_all(dispose);
		}
	};
}

function removeEventListenerFromElement(elementId, eventName, listenerCallback) {
	let element = document.querySelector(elementId);
	if (element) element.removeEventListener(eventName, listenerCallback);
}

//Math algorithms
function hsvToRgb(h, s, v) {
	var r, g, b;
	var i = Math.floor(h * 6);
	var f = h * 6 - i;
	var p = v * (1 - s);
	var q = v * (1 - f * s);
	var t = v * (1 - (1 - f) * s);

	switch (i % 6) {
		case 0:
			(r = v, g = t, b = p);
			break;
		case 1:
			(r = q, g = v, b = p);
			break;
		case 2:
			(r = p, g = v, b = t);
			break;
		case 3:
			(r = p, g = q, b = v);
			break;
		case 4:
			(r = t, g = p, b = v);
			break;
		case 5:
			(r = v, g = p, b = q);
			break;
	}

	return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
}

function instance($$self, $$props, $$invalidate) {
	let { startColor = "#FF0000" } = $$props;

	onMount(() => {
		document.addEventListener("mouseup", mouseUp);
		document.addEventListener("touchend", mouseUp);
		document.addEventListener("mousemove", mouseMove);
		document.addEventListener("touchmove", touchMove);
		document.addEventListener("touchstart", killMouseEvents);
		document.addEventListener("mousedown", killTouchEvents);
		setStartColor();
	});

	Number.prototype.mod = function (n) {
		return (this % n + n) % n;
	};

	const dispatch = createEventDispatcher();
	let tracked;
	let h = 1;
	let s = 1;
	let v = 1;
	let a = 1;
	let r = 255;
	let g = 0;
	let b = 0;
	let hexValue = '#FF0000';

	function setStartColor() {
		let hex = startColor.replace('#', '');

		if (hex.length !== 6 && hex.length !== 3 && !hex.match(/([^A-F0-9])/gi)) {
			alert('Invalid property value (startColor)');
			return;
		}

		let hexFiltered = '';

		if (hex.length === 3) hex.split('').forEach(c => {
			hexFiltered += c + c;
		}); else hexFiltered = hex;

		$$invalidate(3, hexValue = hexFiltered);
		$$invalidate(0, r = parseInt(hexFiltered.substring(0, 2), 16));
		$$invalidate(1, g = parseInt(hexFiltered.substring(2, 4), 16));
		$$invalidate(2, b = parseInt(hexFiltered.substring(4, 6), 16));
		rgbToHSV(r, g, b, true);
		updateCsPicker();
		updateHuePicker();
	}

	function killMouseEvents() {
		removeEventListenerFromElement("#alpha-event", "mousedown", alphaDown);
		removeEventListenerFromElement("#colorsquare-event", "mousedown", csDown);
		removeEventListenerFromElement("#hue-event", "mousedown", hueDown);
		document.removeEventListener("mouseup", mouseUp);
		document.removeEventListener("mousemove", mouseMove);
		document.removeEventListener("touchstart", killMouseEvents);
		document.removeEventListener("mousedown", killTouchEvents);
	}

	function killTouchEvents() {
		removeEventListenerFromElement("#alpha-event", "touchstart", alphaDownTouch);
		removeEventListenerFromElement("#colorsquare-event", "touchstart", csDownTouch);
		removeEventListenerFromElement("#hue-event", "touchstart", hueDownTouch);
		document.removeEventListener("touchend", mouseUp);
		document.removeEventListener("touchmove", touchMove);
		document.removeEventListener("touchstart", killMouseEvents);
		document.removeEventListener("mousedown", killTouchEvents);
	}

	function updateCsPicker() {
		let csPicker = document.querySelector("#colorsquare-picker");
		let xPercentage = s * 100;
		let yPercentage = (1 - v) * 100;
		csPicker.style.top = yPercentage + "%";
		csPicker.style.left = xPercentage + "%";
	}

	function updateHuePicker() {
		let huePicker = document.querySelector("#hue-picker");
		let xPercentage = h * 100;
		huePicker.style.left = xPercentage + "%";
	}

	function colorChangeCallback() {
		dispatch('colorChange', { r, g, b, a });
	}

	function mouseMove(event) {
		if (tracked) {
			let mouseX = event.clientX;
			let mouseY = event.clientY;
			let trackedPos = tracked.getBoundingClientRect();
			let xPercentage, yPercentage, picker;

			switch (tracked.id) {
				case "colorsquare-event":
					xPercentage = (mouseX - trackedPos.x) / 240 * 100;
					yPercentage = (mouseY - trackedPos.y) / 160 * 100;
					xPercentage > 100
					? xPercentage = 100
					: xPercentage < 0 ? xPercentage = 0 : null;
					yPercentage > 100
					? yPercentage = 100
					: yPercentage < 0 ? yPercentage = 0 : null;
					picker = document.querySelector("#colorsquare-picker");
					yPercentage = yPercentage.toFixed(2);
					xPercentage = xPercentage.toFixed(2);
					picker.style.top = yPercentage + "%";
					picker.style.left = xPercentage + "%";
					s = xPercentage / 100;
					v = 1 - yPercentage / 100;
					colorChange();
					break;
				case "hue-event":
					xPercentage = (mouseX - 10 - trackedPos.x) / 220 * 100;
					xPercentage > 100
					? xPercentage = 100
					: xPercentage < 0 ? xPercentage = 0 : null;
					xPercentage = xPercentage.toFixed(2);
					picker = document.querySelector("#hue-picker");
					picker.style.left = xPercentage + "%";
					h = xPercentage / 100;
					hueChange();
					break;
				case "alpha-event":
					xPercentage = (mouseX - 10 - trackedPos.x) / 220 * 100;
					xPercentage > 100
					? xPercentage = 100
					: xPercentage < 0 ? xPercentage = 0 : null;
					xPercentage = xPercentage.toFixed(2);
					picker = document.querySelector("#alpha-picker");
					picker.style.left = xPercentage + "%";
					a = xPercentage / 100;
					colorChange();
					break;
			}
		}
	}

	function touchMove(event) {
		if (tracked) {
			let mouseX = event.touches[0].clientX;
			let mouseY = event.touches[0].clientY;
			let trackedPos = tracked.getBoundingClientRect();
			let xPercentage, yPercentage, picker;

			switch (tracked.id) {
				case "colorsquare-event":
					xPercentage = (mouseX - trackedPos.x) / 240 * 100;
					yPercentage = (mouseY - trackedPos.y) / 160 * 100;
					xPercentage > 100
					? xPercentage = 100
					: xPercentage < 0 ? xPercentage = 0 : null;
					yPercentage > 100
					? yPercentage = 100
					: yPercentage < 0 ? yPercentage = 0 : null;
					picker = document.querySelector("#colorsquare-picker");
					yPercentage = yPercentage.toFixed(2);
					xPercentage = xPercentage.toFixed(2);
					picker.style.top = yPercentage + "%";
					picker.style.left = xPercentage + "%";
					s = xPercentage / 100;
					v = 1 - yPercentage / 100;
					colorChange();
					break;
				case "hue-event":
					xPercentage = (mouseX - 10 - trackedPos.x) / 220 * 100;
					xPercentage > 100
					? xPercentage = 100
					: xPercentage < 0 ? xPercentage = 0 : null;
					xPercentage = xPercentage.toFixed(2);
					picker = document.querySelector("#hue-picker");
					picker.style.left = xPercentage + "%";
					h = xPercentage / 100;
					hueChange();
					break;
				case "alpha-event":
					xPercentage = (mouseX - 10 - trackedPos.x) / 220 * 100;
					xPercentage > 100
					? xPercentage = 100
					: xPercentage < 0 ? xPercentage = 0 : null;
					xPercentage = xPercentage.toFixed(2);
					picker = document.querySelector("#alpha-picker");
					picker.style.left = xPercentage + "%";
					a = xPercentage / 100;
					colorChange();
					break;
			}
		}
	}

	function csDown(event) {
		tracked = event.currentTarget;
		let xPercentage = (event.offsetX + 1) / 240 * 100;
		let yPercentage = (event.offsetY + 1) / 160 * 100;
		yPercentage = yPercentage.toFixed(2);
		xPercentage = xPercentage.toFixed(2);
		let picker = document.querySelector("#colorsquare-picker");
		picker.style.top = yPercentage + "%";
		picker.style.left = xPercentage + "%";
		s = xPercentage / 100;
		v = 1 - yPercentage / 100;
		colorChange();
	}

	function csDownTouch(event) {
		tracked = event.currentTarget;
		let rect = event.target.getBoundingClientRect();
		let offsetX = event.targetTouches[0].clientX - rect.left;
		let offsetY = event.targetTouches[0].clientY - rect.top;
		let xPercentage = (offsetX + 1) / 240 * 100;
		let yPercentage = (offsetY + 1) / 160 * 100;
		yPercentage = yPercentage.toFixed(2);
		xPercentage = xPercentage.toFixed(2);
		let picker = document.querySelector("#colorsquare-picker");
		picker.style.top = yPercentage + "%";
		picker.style.left = xPercentage + "%";
		s = xPercentage / 100;
		v = 1 - yPercentage / 100;
		colorChange();
	}

	function mouseUp(event) {
		tracked = null;
	}

	function hueDown(event) {
		tracked = event.currentTarget;
		let xPercentage = (event.offsetX - 9) / 220 * 100;
		xPercentage = xPercentage.toFixed(2);
		let picker = document.querySelector("#hue-picker");
		picker.style.left = xPercentage + "%";
		h = xPercentage / 100;
		hueChange();
	}

	function hueDownTouch(event) {
		tracked = event.currentTarget;
		let rect = event.target.getBoundingClientRect();
		let offsetX = event.targetTouches[0].clientX - rect.left;
		let xPercentage = (offsetX - 9) / 220 * 100;
		xPercentage = xPercentage.toFixed(2);
		let picker = document.querySelector("#hue-picker");
		picker.style.left = xPercentage + "%";
		h = xPercentage / 100;
		hueChange();
	}

	function hueChange() {
		let rgb = hsvToRgb(h, 1, 1);
		let colorsquare = document.querySelector(".colorsquare");
		colorsquare.style.background = `rgba(${rgb[0]},${rgb[1]},${rgb[2]},1)`;
		colorChange();
	}

	function colorChange() {
		let rgb = hsvToRgb(h, s, v);
		$$invalidate(0, r = rgb[0]);
		$$invalidate(1, g = rgb[1]);
		$$invalidate(2, b = rgb[2]);
		$$invalidate(3, hexValue = RGBAToHex());
		let pickedColor = document.querySelector(".color-picked");
		pickedColor.style.background = `rgba(${rgb[0]},${rgb[1]},${rgb[2]},${a})`;
		colorChangeCallback();
	}

	function alphaDown(event) {
		tracked = event.currentTarget;
		let xPercentage = (event.offsetX - 9) / 220 * 100;
		xPercentage = xPercentage.toFixed(2);
		let picker = document.querySelector("#alpha-picker");
		picker.style.left = xPercentage + "%";
		a = xPercentage / 100;
		colorChange();
	}

	function alphaDownTouch(event) {
		tracked = event.currentTarget;
		let rect = event.target.getBoundingClientRect();
		let offsetX = event.targetTouches[0].clientX - rect.left;
		let xPercentage = (offsetX - 9) / 220 * 100;
		xPercentage = xPercentage.toFixed(2);
		let picker = document.querySelector("#alpha-picker");
		picker.style.left = xPercentage + "%";
		a = xPercentage / 100;
		colorChange();
	}

	function RGBAToHex() {
		let rHex = r.toString(16);
		let gHex = g.toString(16);
		let bHex = b.toString(16);
		if (rHex.length == 1) rHex = "0" + rHex;
		if (gHex.length == 1) gHex = "0" + gHex;
		if (bHex.length == 1) bHex = "0" + bHex;
		return ("#" + rHex + gHex + bHex).toUpperCase();
	}

	function rgbToHSV(r, g, b, update) {
		let rperc, gperc, bperc, max, min, diff, pr, hnew, snew, vnew;
		rperc = r / 255;
		gperc = g / 255;
		bperc = b / 255;
		max = Math.max(rperc, gperc, bperc);
		min = Math.min(rperc, gperc, bperc);
		diff = max - min;
		vnew = max;
		vnew == 0 ? snew = 0 : snew = diff / max;

		for (let i = 0; i < 3; i++) {
			if ([rperc, gperc, bperc][i] === max) {
				pr = i;
				break;
			}
		}

		if (diff == 0) {
			hnew = 0;

			if (update) {
				h = hnew;
				s = snew;
				v = vnew;
				hueChange();
				return;
			} else {
				return { h: hnew, s: snew, v: vnew };
			}
		} else {
			switch (pr) {
				case 0:
					hnew = 60 * ((gperc - bperc) / diff % 6) / 360;
					break;
				case 1:
					hnew = 60 * ((bperc - rperc) / diff + 2) / 360;
					break;
				case 2:
					hnew = 60 * ((rperc - gperc) / diff + 4) / 360;
					break;
			}

			if (hnew < 0) hnew += 6;
		}

		if (update) {
			h = hnew;
			s = snew;
			v = vnew;
			hueChange();
		} else {
			return { h: hnew, s: snew, v: vnew };
		}
	}

	$$self.$$set = $$props => {
		if ('startColor' in $$props) $$invalidate(10, startColor = $$props.startColor);
	};

	return [
		r,
		g,
		b,
		hexValue,
		csDown,
		csDownTouch,
		hueDown,
		hueDownTouch,
		alphaDown,
		alphaDownTouch,
		startColor
	];
}

class HsvPicker extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { startColor: 10 }, add_css);
	}
}

export { HsvPicker };
